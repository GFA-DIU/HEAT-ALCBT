# Generated by Django 5.1.2 on 2025-01-14 16:41

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cities_light', '0011_alter_city_country_alter_city_region_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AssemblyCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('tag', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Assembly Group',
                'verbose_name_plural': 'Assembly Groups',
            },
        ),
        migrations.CreateModel(
            name='AssemblyTechnique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Assembly Subcategorie',
                'verbose_name_plural': 'Assembly Subcategories',
            },
        ),
        migrations.CreateModel(
            name='BuildingCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Building category',
                'verbose_name_plural': 'Building categories',
            },
        ),
        migrations.CreateModel(
            name='BuildingSubcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Building subcategory',
                'verbose_name_plural': 'Building subcategories',
            },
        ),
        migrations.CreateModel(
            name='Impact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impact_category', models.CharField(choices=[('gwp', 'Global Warming Potential'), ('gwp_fos', 'Global Warming Potential - Fossil'), ('gwp_bio', 'Global Warming Potential - Biogenic'), ('gwp_lul', 'Global Warming Potential - Land Use and Land Use Change'), ('odp', 'Ozone Depletion Potential'), ('ap', 'Acidification Potential'), ('ep', 'Eutrophication Potential'), ('ep_fw', 'Eutrophication Potential - Freshwater'), ('ep_mar', 'Eutrophication Potential - Marine'), ('ep_ter', 'Eutrophication Potential - Terrestrial'), ('pocp', 'Photochemical Ozone Creation Potential'), ('adpe', 'Abiotic Depletion Potential - Elements'), ('adpf', 'Abiotic Depletion Potential - Fossil Fuels'), ('penre', 'Primary Energy Non-Renewable'), ('pere', 'Primary Energy Renewable'), ('perm', 'Primary Energy Renewable Material'), ('pert', 'Primary Energy Renewable Total'), ('penrt', 'Primary Energy Non-Renewable Total'), ('penrm', 'Primary Energy Non-Renewable Material'), ('sm', 'Secondary Material'), ('pm', 'Particulate Matter'), ('wdp', 'Water Deprivation Potential'), ('irp', 'Ionizing Radiation Potential'), ('etp_fw', 'Eco-Toxicity Potential - Freshwater'), ('htp_c', 'Human Toxicity Potential - Cancer'), ('htp_nc', 'Human Toxicity Potential - Non-Cancer'), ('sqp', 'Soil Quality Potential'), ('rsf', 'Renewable Secondary Fuels'), ('nrsf', 'Non-Renewable Secondary Fuels'), ('fw', 'Freshwater Use'), ('hwd', 'Hazardous Waste Disposed'), ('nhwd', 'Non-Hazardous Waste Disposed'), ('rwd', 'Radioactive Waste Disposed'), ('cru', 'Components for Reuse'), ('mrf', 'Materials for Recycling'), ('mer', 'Materials for Energy Recovery'), ('eee', 'Exported Energy Electricity'), ('eet', 'Exported Energy Thermal')], max_length=20, verbose_name='Impact Category')),
                ('life_cycle_stage', models.CharField(choices=[('a0', 'Stage A0'), ('a1a3', 'Stages A1 to A3'), ('a4', 'Stage A4'), ('a5', 'Stage A5'), ('b1', 'Stage B1'), ('b2', 'Stage B2'), ('b3', 'Stage B3'), ('b4', 'Stage B4'), ('b5', 'Stage B5'), ('b6', 'Stage B6'), ('b7', 'Stage B7'), ('b8', 'Stage B8'), ('c1', 'Stage C1'), ('c2', 'Stage C2'), ('c3', 'Stage C3'), ('c4', 'Stage C4'), ('d', 'Stage D')], max_length=20, verbose_name='Life Cycle Stage')),
                ('unit', models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'mÂ³ world equiv.'), ('kgsbe', 'kg Sb eq.')], default='unknown', max_length=20, verbose_name='Impact Unit')),
            ],
        ),
        migrations.CreateModel(
            name='AssemblyCategoryTechnique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.assemblycategory')),
                ('technique', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pages.assemblytechnique')),
            ],
        ),
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('public', models.BooleanField(default=False, help_text='Is it visible to all roles', verbose_name='Public')),
                ('draft', models.BooleanField(default=False, help_text='Is it still a draft', verbose_name='Draft')),
                ('mode', models.CharField(choices=[('generic', 'Generic'), ('custom', 'Custom')], default='custom', max_length=20, verbose_name='Assembly Mode')),
                ('dimension', models.CharField(choices=[('area', 'Area (m^2)'), ('length', 'Length (m)'), ('mass', 'Mass (kg)'), ('volume', 'Volume (m^3)')], default='area', max_length=20, verbose_name='Assembly type')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('name', models.CharField(max_length=255)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.city')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.country')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('classification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pages.assemblycategorytechnique')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='assemblycategory',
            name='techniques',
            field=models.ManyToManyField(related_name='categories', through='pages.AssemblyCategoryTechnique', to='pages.assemblytechnique'),
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('public', models.BooleanField(default=False, help_text='Is it visible to all roles', verbose_name='Public')),
                ('draft', models.BooleanField(default=False, help_text='Is it still a draft', verbose_name='Draft')),
                ('street', models.CharField(blank=True, max_length=255, null=True, verbose_name='Street')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='Number')),
                ('zip', models.IntegerField(blank=True, null=True, verbose_name='ZIP')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('name', models.CharField(max_length=255, verbose_name='Building name/code')),
                ('construction_year', models.IntegerField(blank=True, null=True, verbose_name='Year of Construction')),
                ('climate_zone', models.CharField(choices=[('hot-dry', 'hot-dry'), ('warm-humid', 'warm-humid'), ('composite', 'composite'), ('temperate', 'temperate'), ('cold', 'cold')], max_length=50, verbose_name='Climate')),
                ('total_floor_area', models.DecimalField(decimal_places=2, help_text='Gross floor area [m^2]', max_digits=10, verbose_name='Total Floor Area')),
                ('cond_floor_area', models.DecimalField(blank=True, decimal_places=2, help_text='Gross floor area [m^2]', max_digits=10, null=True, verbose_name='Conditional Floor Area')),
                ('floors_above_ground', models.IntegerField(blank=True, help_text='Number of floors above', null=True, validators=[django.core.validators.MaxValueValidator(1000)], verbose_name='Floors above ground')),
                ('floors_below_ground', models.IntegerField(blank=True, help_text='Number of floors below', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Floors below ground')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.city')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.country')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Building',
                'verbose_name_plural': 'Buildings',
            },
        ),
        migrations.CreateModel(
            name='BuildingAssembly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, default=0, help_text='How much of this component', max_digits=10, verbose_name='Quantity')),
                ('reporting_life_cycle', models.IntegerField(help_text='Reporting life-cycle for assembly', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)], verbose_name='Reporting life-cycle')),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.assembly')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.building')),
            ],
            options={
                'verbose_name': 'Building structural component',
                'verbose_name_plural': 'Building structural components',
            },
        ),
        migrations.AddField(
            model_name='building',
            name='structural_components',
            field=models.ManyToManyField(blank=True, related_name='buildings', through='pages.BuildingAssembly', to='pages.assembly'),
        ),
        migrations.CreateModel(
            name='BuildingAssemblySimulated',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, help_text='How many of components', max_digits=10, verbose_name='Quantity')),
                ('unit', models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'mÂ³ world equiv.'), ('kgsbe', 'kg Sb eq.')], default='unknown', max_length=20, verbose_name='Unit of Quantity')),
                ('reporting_life_cycle', models.IntegerField(default=50, help_text='Reporting life-cycle for assembly', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)], verbose_name='Reporting life-cycle')),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.assembly')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.building')),
            ],
            options={
                'verbose_name': 'Building structural component simulation',
                'verbose_name_plural': 'Building structural components simulation',
            },
        ),
        migrations.AddField(
            model_name='building',
            name='simulated_components',
            field=models.ManyToManyField(blank=True, related_name='buildingsimulations', through='pages.BuildingAssemblySimulated', to='pages.assembly'),
        ),
        migrations.CreateModel(
            name='CategorySubcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.buildingcategory')),
                ('subcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.buildingsubcategory')),
            ],
            options={
                'unique_together': {('category', 'subcategory')},
            },
        ),
        migrations.AddField(
            model_name='buildingcategory',
            name='subcategories',
            field=models.ManyToManyField(blank=True, related_name='categories', through='pages.CategorySubcategory', to='pages.buildingsubcategory'),
        ),
        migrations.AddField(
            model_name='building',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pages.categorysubcategory'),
        ),
        migrations.CreateModel(
            name='EPD',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('public', models.BooleanField(default=False, help_text='Is it visible to all roles', verbose_name='Public')),
                ('draft', models.BooleanField(default=False, help_text='Is it still a draft', verbose_name='Draft')),
                ('comment', models.CharField(blank=True, max_length=255, null=True, verbose_name='Comment')),
                ('conversions', models.JSONField(verbose_name='Conversions for units, follwoing EPDx')),
                ('declared_unit', models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'mÂ³ world equiv.'), ('kgsbe', 'kg Sb eq.')], default='unknown', max_length=20, verbose_name='Declared Unit')),
                ('UUID', models.CharField(max_length=40, verbose_name='Unique worldwide EPD identifier')),
                ('name', models.CharField(max_length=255, verbose_name='Material name')),
                ('names', models.JSONField(verbose_name='Name translations')),
                ('version', models.CharField(blank=True, max_length=255, null=True, verbose_name='EPD Node Version')),
                ('source', models.CharField(blank=True, max_length=255, null=True, verbose_name='Source')),
                ('type', models.CharField(choices=[('offical', 'From a verified ILCD+EPD source'), ('custom', 'Created by user')], max_length=255, verbose_name='Type')),
                ('declared_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Reference Quantity of EPD')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.city')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.country')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EPDImpact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('epd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.epd')),
                ('impact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.impact')),
            ],
            options={
                'unique_together': {('epd', 'impact')},
            },
        ),
        migrations.AddField(
            model_name='epd',
            name='impacts',
            field=models.ManyToManyField(related_name='related_epds', through='pages.EPDImpact', to='pages.impact'),
        ),
        migrations.CreateModel(
            name='MaterialCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_de', models.CharField(blank=True, max_length=255)),
                ('name_en', models.CharField(blank=True, max_length=255)),
                ('category_id', models.CharField(max_length=10, unique=True)),
                ('level', models.PositiveIntegerField()),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pages.materialcategory')),
            ],
        ),
        migrations.AddField(
            model_name='epd',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pages.materialcategory'),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('input_unit', models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'mÂ³ world equiv.'), ('kgsbe', 'kg Sb eq.')], default='unknown', max_length=20, verbose_name='Unit for quantity of EPD')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantity of EPD')),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.assembly')),
                ('epd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.epd')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.AddField(
            model_name='assembly',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='assemblies', through='pages.Product', to='pages.epd'),
        ),
    ]
