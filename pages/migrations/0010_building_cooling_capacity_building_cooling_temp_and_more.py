# Generated by Django 5.1.2 on 2025-03-24 17:37

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("pages", "0009_remove_assembly_classification_assembly_is_boq_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name='building',
            name='cooling_capacity',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Heating Capacity'),
        ),
        migrations.AddField(
            model_name='building',
            name='cooling_temp',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)], verbose_name='Typical Cooling Temperature (Celsius)'),
        ),
        migrations.AddField(
            model_name='building',
            name='cooling_temp_unit',
            field=models.CharField(blank=True, choices=[('celsius', '°Celsius'), ('fahrenheit', '°Fahrenheit')], max_length=20, null=True, verbose_name='Cooling Temperature Unit'),
        ),
        migrations.AddField(
            model_name='building',
            name='cooling_type',
            field=models.CharField(blank=True, choices=[('window-ac', 'Window Air Conditioners'), ('split-ac', 'Split Air Conditioners'), ('vrf-system', 'Variable Refrigerant Flow (VRF) Systems'), ('packaged-ac', 'Packaged Air Conditioners'), ('chiller-system', 'Chiller Systems')], max_length=50, null=True, verbose_name='Coolingting Type'),
        ),
        migrations.AddField(
            model_name='building',
            name='cooling_unit',
            field=models.CharField(blank=True, choices=[('tr', 'Ton of Refrigeration'), ('kw', 'Kilowatt')], max_length=20, null=True, verbose_name='Cooling Unit'),
        ),
        migrations.AddField(
            model_name='building',
            name='heating_capacity',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Heating Capacity'),
        ),
        migrations.AddField(
            model_name='building',
            name='heating_temp',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)], verbose_name='Typical Heating Temperature'),
        ),
        migrations.AddField(
            model_name='building',
            name='heating_temp_unit',
            field=models.CharField(blank=True, choices=[('celsius', '°Celsius'), ('fahrenheit', '°Fahrenheit')], max_length=20, null=True, verbose_name='Heating Temperature Unit'),
        ),
        migrations.AddField(
            model_name='building',
            name='heating_type',
            field=models.CharField(blank=True, choices=[('room-heater', 'Room Heaters'), ('reverse_cycle_ac', 'Reverse Cycle Air Conditioners (Heat Pumps)'), ('split-ac', 'Split AC with Heating Mode'), ('packaged-ac', 'Packaged Air Conditioners with Electric Heating Coils'), ('boiler', 'Boiler')], max_length=50, null=True, verbose_name='Heating Type'),
        ),
        migrations.AddField(
            model_name='building',
            name='heating_unit',
            field=models.CharField(blank=True, choices=[('kw', 'Kilowatt')], max_length=20, null=True, verbose_name='Heating Unit'),
        ),
        migrations.AddField(
            model_name='building',
            name='hours_per_week',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)], verbose_name='Operation hours per week'),
        ),
        migrations.AddField(
            model_name='building',
            name='lighting_capacity',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Lighting Capacity'),
        ),
        migrations.AddField(
            model_name='building',
            name='lighting_type',
            field=models.CharField(blank=True, choices=[('led', 'LED (Light Emitting Diode) Lights'), ('cfl', 'CFL (Compact Fluorescent Lamp) Lights'), ('fluorescent-tube', 'T5 and T8 Fluorescent Tube Lights')], max_length=50, null=True, verbose_name='Lighting Type'),
        ),
        migrations.AddField(
            model_name='building',
            name='lighting_unit',
            field=models.CharField(blank=True, choices=[('kw', 'Kilowatt')], max_length=20, null=True, verbose_name='Lighting Unit'),
        ),
        migrations.AddField(
            model_name='building',
            name='num_residents',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Approx. number of residents'),
        ),
        migrations.AddField(
            model_name='building',
            name='ventilation_capacity',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Ventilation Capacity'),
        ),
        migrations.AddField(
            model_name='building',
            name='ventilation_type',
            field=models.CharField(blank=True, choices=[('ahu', 'Air Handling Units (AHUs)'), ('fcu', 'Fan Coil Units (FCUs)'), ('cassette-ac', 'Ceiling or Wall-Mounted Cassette Acs'), ('doas', 'DOAS')], max_length=50, null=True, verbose_name='Ventilation Type'),
        ),
        migrations.AddField(
            model_name='building',
            name='ventilation_unit',
            field=models.CharField(blank=True, choices=[('m^3/h', 'Cubic Meters per Hour'), ('cfm', 'Cubic Feet per Minute')], max_length=20, null=True, verbose_name='Ventilation Unit'),
        ),
        migrations.AddField(
            model_name='building',
            name='weeks_per_year',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(52)], verbose_name='Operation weeks per year'),
        ),
        migrations.AddField(
            model_name='building',
            name='workdays_per_week',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], verbose_name='Operation days per week'),
        ),
        migrations.AlterField(
            model_name='buildingassemblysimulated',
            name='unit',
            field=models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'm³ world equiv.'), ('kgsbe', 'kg Sb eq.'), ('tr', 'Ton of Refrigeration'), ('kw', 'Kilowatt'), ('m^3/h', 'Cubic Meters per Hour'), ('cfm', 'Cubic Feet per Minute'), ('celsius', '°Celsius'), ('fahrenheit', '°Fahrenheit')], default='unknown', max_length=20, verbose_name='Unit of Quantity'),
        ),
        migrations.AlterField(
            model_name='epd',
            name='declared_unit',
            field=models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'm³ world equiv.'), ('kgsbe', 'kg Sb eq.'), ('tr', 'Ton of Refrigeration'), ('kw', 'Kilowatt'), ('m^3/h', 'Cubic Meters per Hour'), ('cfm', 'Cubic Feet per Minute'), ('celsius', '°Celsius'), ('fahrenheit', '°Fahrenheit')], default='unknown', max_length=20, verbose_name='Declared Unit'),
        ),
        migrations.AlterField(
            model_name='impact',
            name='unit',
            field=models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'm³ world equiv.'), ('kgsbe', 'kg Sb eq.'), ('tr', 'Ton of Refrigeration'), ('kw', 'Kilowatt'), ('m^3/h', 'Cubic Meters per Hour'), ('cfm', 'Cubic Feet per Minute'), ('celsius', '°Celsius'), ('fahrenheit', '°Fahrenheit')], default='unknown', max_length=20, verbose_name='Impact Unit'),
        ),
        migrations.CreateModel(
            name='OperationalProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('input_unit', models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'm³ world equiv.'), ('kgsbe', 'kg Sb eq.'), ('tr', 'Ton of Refrigeration'), ('kw', 'Kilowatt'), ('m^3/h', 'Cubic Meters per Hour'), ('cfm', 'Cubic Feet per Minute'), ('celsius', '°Celsius'), ('fahrenheit', '°Fahrenheit')], default='unknown', max_length=20, verbose_name='Unit for quantity of EPD')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantity of EPD')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.building')),
                ('epd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.epd')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='building',
            name='operational_components',
            field=models.ManyToManyField(blank=True, related_name='buildings', through='pages.OperationalProduct', to='pages.epd'),
        ),
        migrations.CreateModel(
            name='SimulatedOperationalProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('input_unit', models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'm³ world equiv.'), ('kgsbe', 'kg Sb eq.'), ('tr', 'Ton of Refrigeration'), ('kw', 'Kilowatt'), ('m^3/h', 'Cubic Meters per Hour'), ('cfm', 'Cubic Feet per Minute'), ('celsius', '°Celsius'), ('fahrenheit', '°Fahrenheit')], default='unknown', max_length=20, verbose_name='Unit for quantity of EPD')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantity of EPD')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.building')),
                ('epd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.epd')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='building',
            name='simulated_operational_components',
            field=models.ManyToManyField(blank=True, related_name='buildingsimulations', through='pages.SimulatedOperationalProduct', to='pages.epd'),
        ),
        migrations.CreateModel(
            name='StructuralProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('input_unit', models.CharField(choices=[('cm', 'Centimeter'), ('m', 'Meter'), ('cm2', 'Square Centimeter'), ('m2', 'Square Meter'), ('m3', 'Cubic Meter'), ('kg', 'Kilogram'), ('tones', 'Tones'), ('pcs', 'Pieces'), ('kwh', 'Kilowatt Hour'), ('l', 'Liter'), ('m2r1', 'Square Meter Rate 1'), ('km', 'Kilometer'), ('tones_km', 'Tones per Kilometer'), ('kgm3', 'Kilogram per Cubic Meter'), ('unknown', 'Unknown'), ('percent', 'Percent'), ('mj', 'Megajoule'), ('kgco2e', 'kgCO2e'), ('kgcfc11e', 'kgCFC11e'), ('kgnmvoce', 'kg NMVOC eq.'), ('moleh+e', 'Mole of H+ eq.'), ('molene', 'Mole of N eq.'), ('kgpe', 'kg P eq.'), ('kgne', 'kg N eq.'), ('m3we', 'm³ world equiv.'), ('kgsbe', 'kg Sb eq.'), ('tr', 'Ton of Refrigeration'), ('kw', 'Kilowatt'), ('m^3/h', 'Cubic Meters per Hour'), ('cfm', 'Cubic Feet per Minute'), ('celsius', '°Celsius'), ('fahrenheit', '°Fahrenheit')], default='unknown', max_length=20, verbose_name='Unit for quantity of EPD')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantity of EPD')),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.assembly')),
                ('epd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.epd')),
            ],
            options={
                'verbose_name': 'StructuralProduct',
                'verbose_name_plural': 'StructuralProducts',
            },
        ),
        migrations.AlterField(
            model_name='assembly',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='assemblies', through='pages.StructuralProduct', to='pages.epd'),
        ),
        migrations.DeleteModel(
            name='Product',
        ),
    ]
